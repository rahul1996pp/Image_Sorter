import os
import shutil
import subprocess
import time
import cv2
import face_recognition


def folder_list():
    folder = input("[+] Enter folder name or drag and drop :- ").replace('"', "")
    for (dirpath, dirnames, filenames) in os.walk(folder):
        print("[+] processing the folder :- ", dirpath)
        folder_files_list(dirpath)


def folder_files_list(dirpath):
    global n_num, f_num, num
    files = os.listdir(dirpath)
    print("[+] Total files in folder are ", len(files))
    for file in files:
        num += 1
        print("[{}] processing the image {}".format(num, file))
        if choice == '1':
            img_cv2(os.path.join(dirpath, file))
        elif choice == '2':
            img_rec(os.path.join(dirpath, file))


def img_cv2(image):
    global cv_f_num, cv_n_num, face_cascade
    gray = cv2.imread(image)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=2, minNeighbors=4, flags=cv2.CASCADE_SCALE_IMAGE)
    if len(faces) == 0:
        cv_f_num += 1
        img_move(image, "faces")
    else:
        cv_n_num += 1
        img_move(image, "no_face")
    return cv_f_num, cv_n_num


def img_move(file, folder):
    shutil.move(file, folder)


def img_folder():
    if os.path.exists("no_face"):
        pass
    else:
        os.mkdir("no_face")
    if os.path.exists("faces"):
        pass
    else:
        os.mkdir("faces")


def img_rec(image):
    global reg_f_num, reg_n_num
    try:
        img = face_recognition.load_image_file(image)
        face_loc = face_recognition.face_locations(img, number_of_times_to_upsample=2)
        faces = face_recognition.face_encodings(img, known_face_locations=face_loc, num_jitters=1)[0]
        reg_f_num += 1
        img_move(image, "faces")
    except:
        reg_n_num += 1
        img_move(image, "no_face")


def choice():
    global choice
    print("""
    ******************************************
    *                MENU                    *
    ******************************************
    *                                        *
    *    [1] CV2                             *
    *                                        *
    *    [2] Face recognition                *
    *                                        *
    ******************************************
    """)
    choice = input("[+] Enter your choice :- ")
    if choice == '1':
        print("[*] Using cv2 processing images")
        cascpath = input("[+] Enter xml path for cv2 or press enter if you want me to search for you :- ").replace('"', "")
        if cascpath == '':
            print("[~] Searching for file.....")
            cascpath = subprocess.check_output("where /r c:\  haarcascade_frontalface_default.xml").strip()
            cascpath = str(cascpath).split("'")[1]
        global face_cascade
        face_cascade = cv2.CascadeClassifier(cascpath)
    elif choice == '2':
        print("[*] Using face recognition processing images")


def credit():
    print("""
            IMAGE SEPARATOR USING CV2 OR FACE RECOGNITION
            """)
    print("""
 ██▀███   ▄▄▄       ██░ ██  █    ██  ██▓    
▓██ ▒ ██▒▒████▄    ▓██░ ██▒ ██  ▓██▒▓██▒    
▓██ ░▄█ ▒▒██  ▀█▄  ▒██▀▀██░▓██  ▒██░▒██░    
▒██▀▀█▄  ░██▄▄▄▄██ ░▓█ ░██ ▓▓█  ░██░▒██░    
░██▓ ▒██▒ ▓█   ▓██▒░▓█▒░██▓▒▒█████▓ ░██████▒
░ ▒▓ ░▒▓░ ▒▒   ▓▒█░ ▒ ░░▒░▒░▒▓▒ ▒ ▒ ░ ▒░▓  ░
  ░▒ ░ ▒░  ▒   ▒▒ ░ ▒ ░▒░ ░░░▒░ ░ ░ ░ ░ ▒  ░
  ░░   ░   ░   ▒    ░  ░░ ░ ░░░ ░ ░   ░ ░   
   ░           ░  ░ ░  ░  ░   ░         ░  ░ code generated by Rahul.p
""")


def main():
    img_folder()
    choice()
    folder_list()
    time_output = time.time() - start_time
    print("[*] Time taken to process images is -",
          time.strftime("%H:%M:%S", time.gmtime(int('{:.0f}'.format(float(str(time_output)))))))
    print("[~] Successfully completed [~]")
    if (cv_n_num == 0) or (cv_n_num == 0):
        print('[*] Using face module \n[+] faces are :- {}\n[-] no faces are :- {}'.format(reg_f_num, reg_n_num))
    else:
        print('[*] Using cv2 \n[+] faces are :- {}\n[-] no faces are :- {}'.format(cv_f_num, cv_n_num))


cv_n_num, cv_f_num, reg_n_num, reg_f_num, num = 0, 0, 0, 0, 0
try:
    credit()
    start_time = time.time()
    main()
except KeyboardInterrupt:
    print("\n[~] Exiting ....")
